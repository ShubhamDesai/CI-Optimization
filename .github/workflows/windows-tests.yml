name: Run Tests, Save, and Retrieve Results

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  actions: read  # Allows GitHub Actions to fetch artifacts

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-json-report pytest-html jq

      - name: Get PR ID
        if: github.event_name == 'pull_request'
        run: echo "PR_ID=${{ github.event.number }}" >> $GITHUB_ENV

      - name: Set Default Folder for Non-PR Runs
        if: github.event_name != 'pull_request'
        run: echo "PR_ID=main" >> $GITHUB_ENV

      - name: Check If Previous Artifacts Exist
        id: check_artifacts
        run: |
          echo "Checking if previous test results exist for PR-${PR_ID}..."
          ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")

          ARTIFACT_COUNT=$(echo "$ARTIFACTS_RESPONSE" | jq -r --arg PR "pr-${PR_ID}-test-results" \
            '[.artifacts[] | select(.name==$PR)] | length')

          if [[ "$ARTIFACT_COUNT" -gt 0 ]]; then
            echo "PREV_ARTIFACT_EXISTS=true" >> $GITHUB_ENV
          else
            echo "PREV_ARTIFACT_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Retrieve Previous Artifacts (If Exists)
        if: env.PREV_ARTIFACT_EXISTS == 'true'
        run: |
          echo "Fetching previous test results for PR ${PR_ID}..."
          ARTIFACT_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
            jq -r --arg PR "pr-${PR_ID}-test-results" \
            '[.artifacts[] | select(.name==$PR)] | sort_by(.created_at) | reverse | .[0].archive_download_url')

          if [[ -n "$ARTIFACT_URL" && "$ARTIFACT_URL" != "null" ]]; then
            echo "Latest artifact found. Downloading..."
            mkdir -p artifacts/pr-${PR_ID}
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -o artifacts/pr-${PR_ID}/test-results.zip "$ARTIFACT_URL"
            unzip -o artifacts/pr-${PR_ID}/test-results.zip -d artifacts/pr-${PR_ID}

            echo "======================================="
            echo "Previous Test Results for PR-${PR_ID}:"
            cat artifacts/pr-${PR_ID}/test_results.json || echo "No previous test results found."
            echo "======================================="

          else
            echo "No previous test results found for PR-${PR_ID}. Running fresh tests."
          fi

      - name: Extract Failed and Passed Tests from Previous Run
        run: |
          mkdir -p artifacts/pr-${PR_ID}  # Ensure test directory exists
          PREV_RESULTS="artifacts/pr-${PR_ID}/test_results.json"
          FAILED_TESTS_FILE="artifacts/pr-${PR_ID}/failed_tests.txt"
          ALL_TESTS_FILE="artifacts/pr-${PR_ID}/all_tests.txt"
          REMAINING_TESTS_FILE="artifacts/pr-${PR_ID}/remaining_tests.txt"

          # Collect all test cases in the project
          pytest --collect-only --quiet | grep "::" > $ALL_TESTS_FILE || true

          if [[ -f "$PREV_RESULTS" ]]; then
            echo "Extracting failed test cases from previous run..."
            cat $PREV_RESULTS | jq -r '.tests | map(select(.outcome == "failed")) | .[].nodeid' > $FAILED_TESTS_FILE
          else
            echo "No previous test results found. Skipping extraction."
            touch $FAILED_TESTS_FILE  # Create an empty file to avoid errors in next steps
          fi

          if [[ -s "$FAILED_TESTS_FILE" ]]; then
            echo "Failed tests from the previous run:"
            cat $FAILED_TESTS_FILE
          else
            echo "No previously failed tests found."
          fi

      - name: Run Previously Failed Tests First
        run: |
          FAILED_TESTS_FILE="artifacts/pr-${PR_ID}/failed_tests.txt"

          if [[ -s "$FAILED_TESTS_FILE" ]]; then
            echo "Rerunning previously failed tests first..."
            
            # Read failed test cases into an array
            mapfile -t FAILED_TESTS < <(grep -v '^$' "$FAILED_TESTS_FILE")

            if [[ ${#FAILED_TESTS[@]} -gt 0 ]]; then
              echo "Running failed tests: ${FAILED_TESTS[@]}"
              
              pytest --tb=long --json-report --json-report-file=artifacts/pr-${PR_ID}/temp_test_results.json \
                     --html=artifacts/pr-${PR_ID}/temp_test_report.html --self-contained-html \
                     --maxfail=100 --disable-warnings --capture=sys "${FAILED_TESTS[@]}" || true

              echo "Finished running previously failed tests."
            else
              echo "No valid failed tests found to rerun."
            fi
          else
            echo "No previously failed tests found."
          fi




      - name: Check If Any Tests Failed Again
        run: |
          TEMP_RESULTS="artifacts/pr-${PR_ID}/temp_test_results.json"
          FAILED_AGAIN_FILE="artifacts/pr-${PR_ID}/failed_again.txt"

          if [[ -f "$TEMP_RESULTS" ]]; then
            echo "Checking if any tests failed again..."
            cat $TEMP_RESULTS | jq -r '.tests | map(select(.outcome == "failed")) | .[].nodeid' > $FAILED_AGAIN_FILE
          fi

          if [[ -s "$FAILED_AGAIN_FILE" ]]; then
            echo "Some tests failed again. Stopping execution."
            exit 1  # Fail workflow if tests fail again
          fi

      - name: Identify Remaining Untested Test Cases
        run: |
          FAILED_TESTS_FILE="artifacts/pr-${PR_ID}/failed_tests.txt"
          ALL_TESTS_FILE="artifacts/pr-${PR_ID}/all_tests.txt"
          REMAINING_TESTS_FILE="artifacts/pr-${PR_ID}/remaining_tests.txt"

          echo "Finding remaining tests to run..."
          grep -v -F -f $FAILED_TESTS_FILE $ALL_TESTS_FILE > $REMAINING_TESTS_FILE || true

          if [[ -s "$REMAINING_TESTS_FILE" ]]; then
            echo "Remaining tests to run:"
            cat $REMAINING_TESTS_FILE
          else
            echo "No remaining tests to run."
          fi

      - name: Run Remaining Test Cases
        run: |
          REMAINING_TESTS_FILE="artifacts/pr-${PR_ID}/remaining_tests.txt"

          if [[ -s "$REMAINING_TESTS_FILE" ]]; then
            echo "Running remaining test cases..."
            pytest --tb=short --json-report --json-report-file=artifacts/pr-${PR_ID}/test_results.json \
                   --html=artifacts/pr-${PR_ID}/test_report.html --self-contained-html $(cat $REMAINING_TESTS_FILE) || true
          else
            echo "No remaining tests to run."
          fi

      - name: Merge Test Results and Generate Final HTML Report
        run: |
          echo "Merging JSON results from previous and remaining tests..."
          
          TEMP_RESULTS="artifacts/pr-${PR_ID}/temp_test_results.json"
          FINAL_RESULTS="artifacts/pr-${PR_ID}/test_results.json"
          MERGED_RESULTS="artifacts/pr-${PR_ID}/merged_test_results.json"
          TEMP_REPORT="artifacts/pr-${PR_ID}/temp_test_report.html"
          FINAL_REPORT="artifacts/pr-${PR_ID}/final_test_report.html"

          # Merge JSON results only if both files exist
          if [[ -f "$TEMP_RESULTS" && -f "$FINAL_RESULTS" ]]; then
            jq -s '.[0].tests + .[1].tests | {tests: .}' "$TEMP_RESULTS" "$FINAL_RESULTS" > "$MERGED_RESULTS"
            mv "$MERGED_RESULTS" "$FINAL_RESULTS"
          fi

          echo "Generating final HTML report from merged results..."
          cp artifacts/pr-${PR_ID}/test_report.html "$FINAL_REPORT"

          # Only merge temp_test_report.html if it exists
          if [[ -f "$TEMP_REPORT" ]]; then
            echo "Merging previously failed test report..."
            cat "$TEMP_REPORT" >> "$FINAL_REPORT"
          else
            echo "⚠️ No temp_test_report.html found. Skipping merge."
          fi




      - name: Upload New Test Results (JSON + HTML Report)
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ env.PR_ID }}-test-results
          path: |
            artifacts/pr-${{ env.PR_ID }}/test_results.json
            artifacts/pr-${{ env.PR_ID }}/final_test_report.html


  retrieve-results:
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: Get PR ID
        if: github.event_name == 'pull_request'
        run: echo "PR_ID=${{ github.event.number }}" >> $GITHUB_ENV

      - name: Set Default Folder for Non-PR Runs
        if: github.event_name != 'pull_request'
        run: echo "PR_ID=main" >> $GITHUB_ENV

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: pr-${{ env.PR_ID }}-test-results
          path: retrieved-results

      - name: Display Retrieved Test Results
        run: |
          echo "======================================="
          echo "Retrieved Test Results from PR ${PR_ID}:"
          cat retrieved-results/test_results.json
          echo "======================================="

      - name: Print HTML Report Location
        run: |
          echo "Your test report is available for download."
          echo "[Click here to download the HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
